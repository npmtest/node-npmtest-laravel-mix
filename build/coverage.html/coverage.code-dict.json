{"/home/travis/build/npmtest/node-npmtest-laravel-mix/test.js":"/* istanbul instrument in package npmtest_laravel_mix */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/lib.npmtest_laravel_mix.js":"/* istanbul instrument in package npmtest_laravel_mix */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_laravel_mix = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_laravel_mix = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-laravel-mix && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_laravel_mix */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_laravel_mix\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_laravel_mix.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_laravel_mix.rollup.js'] =\n            local.assetsDict['/assets.npmtest_laravel_mix.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_laravel_mix.__dirname + '/lib.npmtest_laravel_mix.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/index.js":"global.options = require('./Options');\nglobal.entry = require('./Entry');\nglobal.path = require('path');\nglobal.Paths = new (require('./Paths'));\nglobal.events = new (require('./Dispatcher'));\nglobal.File = require('./File');\n\nlet mix = new (require('./Mix'));\n\n// The default export for this module will in fact\n// be the fluent API for your webpack.mix.js file.\nmodule.exports = api = new (require('./Api'))(mix);\nmodule.exports.mix = api; // Deprecated.\n\n// However, you can access the Mix instance like this:\nmodule.exports.config = mix;\n\n// We'll export a handful of common plugins for a cleaner config file.\nmodule.exports.plugins = {\n    WebpackNotifierPlugin: require('webpack-notifier'),\n    WebpackOnBuildPlugin: require('on-build-webpack'),\n    ExtractTextPlugin: require('extract-text-webpack-plugin'),\n    FriendlyErrorsWebpackPlugin: require('friendly-errors-webpack-plugin'),\n    StatsWriterPlugin: require('webpack-stats-plugin').StatsWriterPlugin,\n    WebpackChunkHashPlugin: require('webpack-chunk-hash'),\n    BrowserSyncPlugin: require('browser-sync-webpack-plugin'),\n    CopyWebpackPlugin: require('./WebpackPlugins/CopyWebpackPlugin'),\n    MockEntryPlugin: require('./WebpackPlugins/MockEntryPlugin')\n};\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Options.js":"module.exports = {\n    /**\n     * Determine if webpack should be triggered in a production environment.\n     *\n     * @type {Booolean}\n     */\n    production:  (process.env.NODE_ENV === 'production' || process.argv.includes('-p')),\n\n\n    /**\n     * Determine if we should enable hot reloading.\n     *\n     * @type {Boolean}\n     */\n    hmr: process.argv.includes('--hot'),\n\n\n    /**\n     * Determine if sourcemaps should be created for the build.\n     *\n     * @type {Boolean}\n     */\n    sourcemaps: false,\n\n\n    /**\n     * Determine if notifications should be displayed for each build.\n     *\n     * @type {Boolean}\n     */\n    notifications: true,\n\n\n    /**\n     * The public path for the build.\n     *\n     * @type {String}\n     */\n    publicPath: '',\n\n\n    /**\n     * The resource root for the build.\n     *\n     * @type {String}\n     */\n    resourceRoot: '/',\n\n\n    /**\n     * The default Babel configuration.\n     *\n     * @type {Object}\n     */\n    babel: {\n        cacheDirectory: true,\n        presets: [\n            ['env', {\n                'modules': false,\n                'targets': {\n                    'browsers': ['> 2%'],\n                    uglify: true\n                }\n            }]\n        ]\n    },\n\n\n    /**\n     * Determine if the bundled assets should be versioned.\n     *\n     * @type {Boolean}\n     */\n    versioning: false,\n\n\n    /**\n     * Whether to extract .vue component styles into a dedicated file.\n     * You may provide a boolean, or a dedicated path to extract to.\n     *\n     * @type {Boolean|string}\n     */\n    extractVueStyles: false,\n\n\n    /**\n     * Determine if CSS url()s should be processed by Webpack.\n     *\n     * @type {Boolean}\n     */\n    processCssUrls: true,\n\n\n    /**\n     * Determine if Mix should remove unused selectors from your CSS bundle.\n     * You may provide a boolean, or object for the Purify plugin.\n     *\n     * https://github.com/webpack-contrib/purifycss-webpack#options\n     *\n     * @type {Boolean|object}\n     */\n    purifyCss: false,\n\n\n    /**\n     * Uglify-specific settings for Webpack.\n     *\n     * See: https://github.com/mishoo/UglifyJS2#compressor-options\n     *\n     * @type {Object}\n     */\n    uglify: {\n        sourceMap: true,\n        compress: {\n            warnings: false,\n            drop_console: true\n        }\n    },\n\n\n    /**\n     * PostCSS plugins to be applied to compiled CSS.\n     *\n     * See: https://github.com/postcss/postcss/blob/master/docs/plugins.md\n     *\n     * @type {Array}\n     */\n    postCss: [\n        require('autoprefixer')\n    ],\n\n\n    /**\n     * vue-loader specific options.\n     *\n     * @type {Object}\n     */\n    vue: {\n        preLoaders: {},\n        postLoaders: {}\n    },\n\n\n    /**\n     * Determine if Mix should ask the friendly errors plugin to\n     * clear the console before outputting the results or not.\n     *\n     * https://github.com/geowarin/friendly-errors-webpack-plugin#options\n     *\n     * @type {Boolean}\n     */\n    clearConsole: true,\n\n\n    /**\n     * Merge the given options with the current defaults.\n     *\n     * @param {object} options\n     */\n    merge(options) {\n        let mergeWith = require('lodash').mergeWith;\n\n        mergeWith(this, options, (objValue, srcValue) => {\n            if (Array.isArray(objValue)) {\n                return objValue.concat(srcValue);\n            }\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Entry.js":"let Collection = new require('./Collection');\nlet Verify = require('./Verify');\n\nclass Entry {\n    /**\n     * Create a new Entry instance.\n     */\n    constructor() {\n        this.entry = new Collection;\n        this.scripts = [];\n        this.extractions = [];\n    }\n\n\n    /**\n     * Add a script to the entry.\n     *\n     * @param {string|array} entry\n     * @param {string} output\n     */\n    addScript(entry, output) {\n        Verify.js(entry, output);\n\n        entry = [].concat(entry).map(file => {\n            return new File(path.resolve(file)).parsePath();\n        });\n\n        output = this.normalizeOutput(output, entry);\n\n        this.entry.add(\n            this.entryName(output),\n            entry.map(src => src.path)\n        );\n\n        this.scripts = this.scripts.concat(entry);\n        this.base = output.base.replace(global.options.publicPath, '');\n\n        return this;\n    }\n\n\n    /**\n     * Add a stylesheet to the entry.\n     *\n     * @param {string} src\n     * @param {string} output\n     */\n    addStylesheet(src, output) {\n        let name = Object.keys(this.get())[0];\n\n        this.entry.add(name, path.resolve(src));\n\n        return this;\n    }\n\n\n    /**\n     * Add a set of vendor extractions to the entry.\n     *\n     * @param {array} libs\n     * @param {string|null} output\n     */\n    addVendor(libs, output) {\n        if (! this.hasScripts() && ! output) {\n            throw new Error(\n                'Please provide an output path as the second argument to ' +\n                'mix.extract(),  or call mix.js() first.'\n            );\n        }\n\n        let vendorPath = output\n            ? output.replace(/\\.js$/, '').replace(global.options.publicPath, '')\n            : path.join(this.base, 'vendor').replace(/\\\\/g, '/');\n\n        this.extractions.push(vendorPath);\n        this.extractionBase = new File(vendorPath).parsePath().base;\n\n        this.entry.add(vendorPath, libs);\n\n        return this;\n    }\n\n\n    /**\n     * Calculate the entry named from the output path.\n     *\n     * @param {object} output\n     */\n    entryName(output) {\n        if (typeof output === 'string') {\n            output = new File(path.resolve(output)).parsePath();\n        }\n\n        return output.pathWithoutExt\n            .replace(/\\\\/g, '/')\n            .replace(/\\.js$/, '')\n            .replace(global.options.publicPath + '/', '/');\n    }\n\n    /**\n     * Normalize the full output path.\n     *\n     * @param {string} output\n     * @param {string|array} entry\n     */\n    normalizeOutput(output, entry) {\n        output = new File(output).parsePath();\n\n        if (output.isDir) {\n            output = new File(\n                path.join(output.path, entry[0].file)\n            ).parsePath();\n        }\n\n        return output;\n    }\n\n\n    /**\n     * Fetch the Webpack-ready entry object.\n     */\n    get() {\n        if (! this.entry.any()) {\n            let file = new File(path.resolve(__dirname, 'mock-entry.js'));\n\n            this.entry.add('mix', file.path());\n        }\n\n        return this.entry.get();\n    }\n\n\n    /**\n     * Determine if there are any registered vendor extractions.\n     */\n    hasExtractions() {\n        return this.extractions.length > 0;\n    }\n\n\n    /**\n     * Fetch the vendor extractions list.\n     */\n    getExtractions() {\n        // We also need to extract webpack's manifest file,\n        // so that it doesn't bust the cache.\n        return this.extractions.concat(\n            path.join(this.extractionBase, 'manifest').replace(/\\\\/g, '/')\n        );\n    }\n\n    /**\n     * Determine if the requested entry includes script compilation.\n     */\n    hasScripts() {\n        return this.scripts.length > 0;\n    }\n\n\n    /**\n     * Fetch the user requested script compilations.\n     */\n    scripts() {\n        return this.scripts;\n    }\n\n\n    /**\n     * Reset the entry object.\n     */\n    reset() {\n        return new Entry;\n    }\n}\n\nmodule.exports = new Entry;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Collection.js":"class Collection {\n    /**\n     * Create a new Collection instance.\n     *\n     * @param {object} items\n     */\n    constructor(items = {}) {\n        this.items = items;\n    }\n\n\n    /**\n     * Add a new key-value pair to the collection.\n     *\n     * @param {string}       name\n     * @param {string|Array} files\n     */\n    add(name, files) {\n        if (! this.items[name]) {\n            this.items[name] = [];\n        }\n\n        this.items[name] = this.items[name].concat(files);\n    }\n\n\n    /**\n     * Get the underlying items for the collection.\n     *\n     * @return {Array}\n     */\n    get() {\n        return this.items;\n    }\n\n\n    /**\n     * Determine if there are any items in the collection.\n     */\n    any() {\n        return Object.keys(this.get()).length > 0;\n    }\n\n\n    /**\n     * Empty the collection.\n     */\n    empty() {\n        this.items = {};\n\n        return this;\n    }\n}\n\nmodule.exports = Collection;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Verify.js":"let assert = require('assert');\nlet exec = require('child_process').execSync;\n\nclass Verify {\n    /**\n     * Verify that the call the mix.js() is valid.\n     *\n     * @param {*} entry\n     * @param {*} output\n     */\n    static js(entry, output) {\n        assert(\n            typeof entry === 'string' || Array.isArray(entry),\n            'mix.js() is missing required parameter 1: entry'\n        );\n\n        assert(\n            typeof output === 'string',\n            'mix.js() is missing required parameter 2: output'\n        );\n    }\n\n\n    /**\n     * Verify that the calls the mix.sass() and mix.less() are valid.\n     *\n     * @param {string} type\n     * @param {string} src\n     * @param {string} output\n     */\n    static preprocessor(type, src, output) {\n        assert(\n            typeof src === 'string',\n            `mix.${type}() is missing required parameter 1: src`\n        );\n\n        assert(\n            typeof output === 'string',\n            `mix.${type}() is missing required parameter 2: output`\n        );\n    }\n\n\n    /**\n     * Verify that the call the mix.extract() is valid.\n     *\n     * @param {Array} libs\n     */\n    static extract(libs) {\n        assert(\n            libs && Array.isArray(libs),\n            'mix.extract() requires an array as its first parameter.'\n        );\n    }\n\n\n    /**\n     * Verify that the necessary dependency is available.\n     *\n     * @param {string}  dependency\n     * @param {string}  installCommand\n     * @param {Boolean} abortOnComplete\n     */\n    static dependency(dependency, installCommand, abortOnComplete = false) {\n        try {\n            require.resolve(dependency);\n        } catch (e) {\n            console.log(\n                'Additional dependencies must be installed. ' +\n                'This will only take a moment.'\n            );\n\n            exec(installCommand);\n\n            if (abortOnComplete) {\n                console.log('Finished. Please run Mix again.');\n\n               process.exit();\n            }\n        }\n    }\n}\n\nmodule.exports = Verify;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Paths.js":"class Paths {\n    /**\n     * Create a new Paths instance.\n     */\n    constructor() {\n        this.rootPath = path.resolve(__dirname, '../../../');\n    }\n\n\n    /**\n     * Set the root path to resolve webpack.mix.js.\n     *\n     * @param {string} path\n     */\n    setRootPath(path) {\n        this.rootPath = path;\n\n        return this;\n    }\n\n\n    /**\n     * Determine the path to the user's webpack.mix.js file.\n     */\n    mix() {\n        return this.root('webpack.mix');\n    }\n\n\n    /**\n     * Determine the project root.\n     *\n     * @param {string|null} append\n     */\n    root(append = '') {\n        return path.resolve(this.rootPath, append);\n    }\n}\n\nmodule.exports = Paths;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Dispatcher.js":"class Dispatcher {\n    /**\n     * Create a new Dispatcher instance.\n     */\n    constructor() {\n        this.events = {};\n    }\n\n\n    /**\n     * Listen for the given event.\n     *\n     * @param {string|Array}   events\n     * @param {Function}       handler\n     */\n    listen(events, handler) {\n        events = [].concat(events);\n\n        events.forEach(event => {\n            this.events[event] = (this.events[event] || []).concat(handler);\n        });\n\n        return this;\n    }\n\n\n    /**\n     * Trigger all handlers for the given event.\n     *\n     * @param {string} event\n     * @param {*} data\n     */\n    fire(event, data) {\n        if (! this.events[event]) return false;\n\n        this.events[event].forEach(handler => handler(data));\n    }\n\n\n    /**\n     * Fetch all registered event listeners.\n     */\n    all() {\n        return this.events;\n    }\n}\n\nmodule.exports = Dispatcher;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/File.js":"let fs = require('fs');\nlet md5 = require('md5');\nlet chokidar = require('chokidar');\nlet mkdirp = require('mkdirp');\nlet options = require('./Options');\nlet uglify = require('uglify-js');\nlet UglifyCss = require('clean-css');\n\nclass File {\n    /**\n     * Create a new File instance.\n     *\n     * @param {string} file\n     */\n    constructor(file) {\n        this.file = file;\n        this.fileType = path.extname(file);\n    }\n\n\n    /**\n     * Static constructor.\n     *\n     * @param {string} file\n     */\n    static find(file) {\n        return new File(file);\n    }\n\n\n    /**\n     * Make all nested directories in the current file path.\n     */\n    makeDirectories() {\n        mkdirp.sync(this.parsePath().base);\n\n        return this;\n    }\n\n\n    /**\n     * Minify the file, if it is CSS or JS.\n     */\n    minify() {\n        if (this.fileType === '.js') {\n            this.write(uglify.minify(this.file, options.uglify).code);\n        }\n\n        if (this.fileType === '.css') {\n            this.write(\n                new UglifyCss().minify(this.read()).styles\n            );\n        }\n    }\n\n\n    /**\n     * Determine if the given file exists.\n     *\n     * @param {string} file\n     */\n    static exists(file) {\n        return fs.existsSync(file);\n    }\n\n\n    /**\n     * Read the file.\n     */\n    read() {\n        return fs.readFileSync(this.file, {\n            encoding: 'utf-8'\n        });\n    }\n\n\n    /**\n     * Write the given contents to the file.\n     *\n     * @param {string} body\n     */\n    write(body) {\n        if (typeof body === 'object') {\n            body = JSON.stringify(body, null, 2);\n        }\n\n        fs.writeFileSync(this.file, body);\n\n        return this;\n    }\n\n\n    /**\n     * Delete/Unlink the current file.\n     */\n    delete() {\n        if (fs.existsSync(this.file)) {\n            fs.unlinkSync(this.file);\n        }\n    }\n\n\n    /**\n     * Watch the current file for changes.\n     *\n     * @param {Function} callback\n     */\n    watch(callback) {\n        return chokidar.watch(\n            this.path(), { persistent: true }\n        ).on('change', () => callback(this));\n    }\n\n\n    /**\n     * Fetch the full path to the file.\n     *\n     * @return {string}\n     */\n    path() {\n        return path.resolve(this.file);\n    }\n\n\n    /**\n     * Version the current file.\n     */\n    version() {\n        let contents = this.read();\n\n        let versionedPath = this.versionedPath(md5(contents));\n\n        return new File(versionedPath).write(contents);\n    }\n\n\n    /**\n     * Fetch a full, versioned path to the file.\n     *\n     * @param {string} hash\n     */\n    versionedPath(hash) {\n        if (! hash) hash = md5(this.read());\n\n        return this.parsePath().hashedPath.replace('[hash]', hash);\n    }\n\n\n    /**\n     * Parse the file path into segments.\n     */\n    parsePath() {\n        let outputSegments = path.parse(this.file);\n\n        return {\n            path: this.file,\n            pathWithoutExt: path.join(outputSegments.dir, `${outputSegments.name}`),\n            hashedPath: path.join(outputSegments.dir, `${outputSegments.name}.[hash]${outputSegments.ext}`),\n            base: outputSegments.dir,\n            file: outputSegments.base,\n            hashedFile: `${outputSegments.name}.[hash]${outputSegments.ext}`,\n            name: outputSegments.name,\n            isFile: !! outputSegments.ext,\n            isDir: ! outputSegments.ext,\n            ext: outputSegments.ext\n        };\n    }\n\n\n    /**\n     * Rename the file.\n     *\n     * @param {string} to\n     */\n    rename(to) {\n        fs.renameSync(this.file, to);\n\n        this.file = to;\n\n        return this;\n    }\n}\n\nmodule.exports = File;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Mix.js":"let Concat = require('./Concat');\nlet Manifest = require('./Manifest');\nlet Versioning = require('./Versioning');\n\nclass Mix {\n    /**\n     * Create a new Laravel Mix instance.\n     */\n    constructor() {\n        this.concat = new Concat();\n        this.copy = [];\n        this.inProduction = options.production;\n        this.publicPath = options.publicPath;\n        this.options = global.options; // deprecated\n        this.Paths = global.Paths;\n    }\n\n\n    /**\n     * Initialize the user's webpack.mix.js configuration file.\n     */\n    initialize() {\n        if (this.isUsingLaravel()) {\n            this.publicPath = options.publicPath = 'public';\n        }\n\n        this.manifest = new Manifest();\n\n        // This is where we load the user's webpack.mix.js config.\n        File.exists(Paths.mix() + '.js') && require(Paths.mix());\n\n        if (options.versioning) {\n            this.versioning = new Versioning(this.version, this.manifest).watch();\n        }\n\n        if (this.standaloneSass) this.standaloneSass.run();\n\n        this.detectHotReloading();\n\n        global.events.fire('init', this);\n    }\n\n\n    /**\n     * Prepare the Webpack entry object.\n     */\n    entry() {\n        return global.entry;\n    }\n\n\n    /**\n     * Determine the Webpack output path.\n     */\n    output() {\n        let filename = options.versioning ? '[name].[chunkhash].js' : '[name].js';\n        let chunkFilename = path.join(\n            global.entry.base || '', (options.versioning ? '[name].[chunkhash].js' : '[name].js')\n        );\n\n        let http = process.argv.includes('--https') ? 'https' : '';\n\n        return {\n            path: path.resolve(options.hmr ? '/' : options.publicPath),\n            filename: filename,\n            chunkFilename: chunkFilename.replace(/^\\//, ''),\n            publicPath: options.hmr ? (http + '://localhost:8080/') : ''\n        };\n    }\n\n\n    /**\n     * Detect if the user desires hot reloading.\n     *\n     * @param {boolean} force\n     */\n    detectHotReloading(force = false) {\n        let file = new File(options.publicPath + '/hot');\n\n        file.delete();\n\n        // If the user wants hot module replacement, we'll create\n        // a temporary file, so that Laravel can detect it, and\n        // reference the proper base URL for any assets.\n        if (options.hmr || force) {\n            options.hmr = true;\n\n            file.write('hot reloading');\n        }\n    }\n\n\n    /**\n     * Fetch the appropriate Babel config for babel-loader.\n     */\n    babelConfig() {\n        if (File.exists(Paths.root('.babelrc'))) return '?cacheDirectory';\n\n        // If the user doesn't have a .babelrc, we'll use our config.\n        if (this.react) {\n            options.babel.presets.push('react');\n        }\n\n        return '?' + JSON.stringify(options.babel);\n    }\n\n    /**\n     * Fetch definitions for DefinePlugin\n     *\n     * @param {object} merge\n     */\n    definitions(merge = {}) {\n        let regex = /^MIX_/i\n\n        // Filter out environment variables that doesn't pass regex\n        let env = Object.keys(process.env)\n            .filter(key => regex.test(key))\n            .reduce((value, key) => {\n                value[key] = process.env[key]\n                return value\n            }, {});\n\n        let values = Object.assign(env, merge);\n\n        return {\n            'process.env': Object.keys(values)\n                // Stringify all values so we can feed into Webpack DefinePlugin\n                .reduce((value, key) => {\n                    value[key] = JSON.stringify(values[key])\n                    return value\n                }, {})\n        };\n    }\n\n    /**\n     * Determine if we are working with a Laravel project.\n     */\n    isUsingLaravel() {\n        return File.exists('./artisan');\n    }\n\n\n    /**\n     * Fetch the Vue-specific ExtractTextPlugin.\n     */\n    vueExtractTextPlugin() {\n        let VueExtractTextPluginFactory = require('./Vue/ExtractTextPluginFactory');\n\n        return new VueExtractTextPluginFactory(this, options.extractVueStyles).build();\n    }\n};\n\nmodule.exports = Mix;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Concat.js":"let md5 = require('md5');\nlet chokidar = require('chokidar');\nlet concatenate = require('concatenate');\nlet babel;\n\nclass Concat {\n    /**\n     * Create a new Concat instance.\n     */\n    constructor() {\n        this.combinations = [];\n\n        global.events.listen('build', this.run.bind(this))\n            .listen('init', () => this.watch());\n    }\n\n\n    /**\n     * Add a set of files to be combined.\n     *\n     * @param {object} files\n     */\n    add(files) {\n        this.combinations.push({\n            src: files.src,\n            output: files.output,\n            outputOriginal: files.output,\n            babel: !! files.babel\n        });\n\n        return this;\n    }\n\n\n    /**\n     * Watch all relevant files for changes.\n     *\n     * @param {object|null} watcher\n     */\n    watch(watcher) {\n        watcher = watcher || chokidar;\n\n        if (! this.shouldWatch() || ! this.any()) return;\n\n        this.combinations.forEach(combination => {\n            watcher.watch(combination.src, { persistent: true })\n                   .on('change', this.combine.bind(this, combination));\n        });\n    }\n\n\n    /**\n     * Determine if file watching should be enabled.\n     *\n     * @return {boolean}\n     */\n    shouldWatch() {\n        return this.any() && process.argv.includes('--watch');\n    }\n\n\n    /**\n     * Process combination.\n     *\n     * @param {object} files\n     */\n    combine(files) {\n        let output = File.find(files.output).makeDirectories();\n\n        let mergedFileContents = concatenate.sync(files.src, files.output);\n\n        if (files.babel && output.fileType === '.js') {\n            output.write(this.babelify(mergedFileContents));\n        }\n\n        // If file versioning is enabled, then we'll\n        // rename the output file to apply a hash.\n        if (global.options.versioning) {\n            let versionedPath = File.find(files.outputOriginal)\n                .versionedPath(md5(mergedFileContents));\n\n            files.output = output.rename(versionedPath).file;\n        }\n\n        if (process.env.NODE_ENV === 'production' || process.argv.includes('-p')) {\n            new File(files.output).minify();\n        }\n\n        // We'll now fire an event, so that the Manifest class\n        // can be refreshed to reflect these new files.\n        global.events.fire('combined', files);\n    }\n\n\n    /**\n     * Apply Babel to the given contents.\n     *\n     * @param {string} contents\n     */\n    babelify(contents) {\n        if (! babel) babel = require('babel-core');\n\n        return babel.transform(\n            contents, { presets: ['env'] }\n        ).code;\n    }\n\n\n    /**\n     * Perform all relevant combinations.\n     */\n    run() {\n        this.combinations.forEach(files => this.combine(files));\n\n        return this;\n    }\n\n\n    /**\n     * Determine if there are any files to concatenate.\n     *\n     * @return {boolean}\n     */\n    any() {\n        return this.combinations.length > 0;\n    }\n}\n\nmodule.exports = Concat;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Manifest.js":"let objectValues = require('lodash').values;\n\nclass Manifest {\n    /**\n     * Create a new Manifest instance.\n     */\n    constructor() {\n        this.manifest = {};\n        this.cache = this.exists() ? this.read() : {};\n\n        this.registerEvents();\n    }\n\n\n    /**\n     * Register any applicable event listeners.\n     */\n    registerEvents() {\n        global.events.listen('combined', this.appendCombinedFiles.bind(this))\n            .listen('standalone-sass-compiled', compiledFile => {\n                this.add(compiledFile);\n                this.refresh();\n            });\n\n        return this;\n    }\n\n\n    /**\n     * Add a key-value pair to the manifest file.\n     *\n     * @param {File} file\n     */\n    add(file) {\n        let original = this.preparePath(file.file);\n\n        this.manifest[original] = global.options.versioning ? this.preparePath(file.versionedPath()) : original;\n\n        return this;\n    }\n\n\n    /**\n     * Get the modified version of the given path.\n     *\n     * @param {string} original\n     */\n    get(original) {\n        if (original) {\n            if (original instanceof File) original = original.file;\n\n            return this.manifest[this.preparePath(original)];\n        }\n\n        return this.manifest;\n    }\n\n\n    /**\n     * Transform the Webpack stats into the shape we need.\n     *\n     * @param {object} stats\n     * @param {object} options\n     */\n    transform(stats, options) {\n        let flattenedPaths = [].concat.apply(\n            [], objectValues(stats.assetsByChunkName)\n        );\n\n        flattenedPaths.forEach(path => {\n            path = this.preparePath(path);\n\n            if (! path.startsWith('/')) path = ('/'+path);\n\n            let original = path.replace(/\\.(\\w{20}|\\w{32})(\\..+)/, '$2');\n\n            this.manifest[original] = path;\n        });\n\n        return JSON.stringify(this.manifest, null, 2);\n    }\n\n\n    /**\n     * Append any mix.combine()'d output paths to the manifest.\n     *\n     * @param {Array} toCombine\n     */\n    appendCombinedFiles(toCombine) {\n        let output = this.preparePath(toCombine.output);\n\n        this.manifest[\n            output.replace(/\\.(\\w{32})(\\..+)/, '$2')\n        ] = output;\n\n        this.refresh();\n    }\n\n\n    /**\n     * Refresh the mix-manifest.js file.\n     */\n    refresh() {\n        let manifest = {};\n\n        for (let key in this.manifest) {\n            let val = this.preparePath(this.manifest[key]);\n\n            key = this.preparePath(key);\n\n            manifest[key] = val;\n        }\n\n        File.find(this.path()).write(manifest);\n    }\n\n\n    /**\n     * Get the path to the manifest file.\n     */\n    path() {\n        return path.join(global.options.publicPath, 'mix-manifest.json');\n    }\n\n\n    /**\n     * Determine if the manifest file exists.\n     */\n    exists() {\n        return File.exists(this.path());\n    }\n\n\n    /**\n     * Retrieve the JSON output from the manifest file.\n     */\n    read() {\n        return JSON.parse(File.find(this.path()).read());\n    }\n\n\n    /**\n     * Prepare the provided path for processing.\n     *\n     * @param {string} path\n     */\n    preparePath(path) {\n        return path.replace(new RegExp('^' +  global.options.publicPath), '')\n                   .replace(/\\\\/g, '/');\n    }\n\n\n    /**\n     * Delete the given file from the manifest.\n     *\n     * @param {string} file\n     */\n    remove(file) {\n        File.find(file).delete();\n    }\n}\n\nmodule.exports = Manifest;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Versioning.js":"let objectValues = require('lodash').values;\n\nclass Versioning {\n    /**\n     * Create a new Versioning instance.\n     *\n     * @param {Array}  manualFiles\n     * @param {object} manifest\n     * @param {string} publicPath\n     */\n    constructor(manualFiles = [], manifest) {\n        this.manualFiles = manualFiles.map(file => new File(file));\n        this.manifest = manifest;\n\n        this.registerEvents();\n    }\n\n\n    /**\n     * Register all relevant event listeners.\n     */\n    registerEvents() {\n        global.events.listen('standalone-sass-compiled', compiledFile => {\n            compiledFile.rename(compiledFile.versionedPath());\n\n            this.prune();\n        });\n\n        global.events.listen(\n            ['build', 'combined'], () => this.prune()\n        );\n    }\n\n\n    /**\n     * Register a watcher for any files that aren't\n     * included in Webpack's core bundle process.\n     */\n    watch() {\n        if (! process.argv.includes('--watch')) return this;\n\n        this.manualFiles.forEach(file => {\n            file.watch(file => {\n                // Delete the old versioned file.\n                File.find(\n                    path.join(global.options.publicPath, this.manifest.get(file))\n                ).delete();\n\n                // And then whip up a new one.\n                file.version();\n\n                this.prune();\n            });\n        });\n\n        return this;\n    }\n\n\n    /**\n     * Create all hashed files requested by the user,\n     * when they called mix.version(['file']);\n     */\n    writeHashedFiles() {\n        this.manualFiles.forEach(file => file.version());\n\n        return this;\n    }\n\n\n    /**\n     * The user may optionally add extra files to be\n     * versioned. Here, we'll manually add those to\n     * Mix's manifest file.\n     */\n    addManualFilesToManifest() {\n        this.manualFiles.forEach(file => this.manifest.add(file));\n    }\n\n\n    /**\n     * Replace all old hashed files with the new versions.\n     */\n    prune() {\n        this.writeHashedFiles().addManualFilesToManifest();\n\n        let cachedFiles = objectValues(this.manifest.cache);\n        let currentFiles = objectValues(this.manifest.get());\n\n        cachedFiles\n            .filter(file => ! currentFiles.includes(file))\n            .map(file => {\n                return file.startsWith(global.options.publicPath)\n                    ? file\n                    : path.join(global.options.publicPath, file);\n            })\n            .forEach(file => {\n                this.manifest.remove(file)\n            });\n\n        this.manifest.refresh();\n        this.manifest.cache = currentFiles;\n\n        return currentFiles;\n    }\n}\n\nmodule.exports = Versioning;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Api.js":"let Verify = require('./Verify');\n\nclass Api {\n    /**\n     * Create a new API instance.\n     *\n     * @param {Mix} Mix\n     */\n    constructor(Mix) {\n        this.Mix = Mix;\n    }\n\n    /**\n     * Register the Webpack entry/output paths.\n     *\n     * @param {string|Array}  entry\n     * @param {string} output\n     */\n    js(entry, output) {\n        global.entry.addScript(entry, output);\n\n        return this;\n    };\n\n\n    /**\n     * Declare support for the React framework.\n     */\n    react(entry, output) {\n        this.Mix.react = true;\n\n        Verify.dependency(\n            'babel-preset-react',\n            'npm install babel-preset-react --save-dev'\n        );\n\n        this.js(entry, output);\n\n        return this;\n    };\n\n\n    /**\n     * Register vendor libs that should be extracted.\n     * This helps drastically with long-term caching.\n     *\n     * @param {Array}  libs\n     * @param {string} output\n     */\n    extract(libs, output) {\n        global.entry.addVendor(libs, output);\n\n        return this;\n    };\n\n\n    /**\n     * Register libraries to automatically \"autoload\" when\n     * the appropriate variable is references in js\n     *\n     * @param {object} libs\n     */\n    autoload(libs) {\n        let aliases = {};\n\n        Object.keys(libs).forEach(library => {\n            [].concat(libs[library]).forEach(alias => {\n                aliases[alias] = library;\n            });\n        });\n\n        this.Mix.autoload = aliases;\n\n        return this;\n    };\n\n\n    /**\n     * Enable Browsersync support for the project.\n     *\n     * @param {object} config\n     */\n    browserSync(config = {}) {\n        if (typeof config === 'string') {\n            config = { proxy: config };\n        }\n\n        this.Mix.browserSync = config;\n\n        return this;\n    };\n\n\n    /**\n     * Register Sass compilation.\n     *\n     * @param {string} src\n     * @param {string} output\n     * @param {object} pluginOptions\n     */\n    sass(src, output, pluginOptions = {}) {\n        return this.preprocess(\n            'Sass', src, output, pluginOptions\n        );\n    };\n\n\n    /**\n     * Register standalone-Sass compilation that will not run through Webpack.\n     *\n     * @param {string} src\n     * @param {string} output\n     * @param {object} pluginOptions\n     */\n    standaloneSass(src, output, pluginOptions = {}) {\n        let Preprocessor = require('./Preprocessors/StandaloneSass');\n\n        this.Mix.standaloneSass = new Preprocessor(src, output, pluginOptions);\n\n        return this;\n    };\n\n\n    /**\n     * Register Less compilation.\n     *\n     * @param {string} src\n     * @param {string} output\n     * @param {object} pluginOptions\n     */\n    less(src, output, pluginOptions = {}) {\n        return this.preprocess(\n            'Less', src, output, pluginOptions\n        );\n    };\n\n\n    /**\n     * Register Stylus compilation.\n     *\n     * @param {string} src\n     * @param {string} output\n     * @param {object} pluginOptions\n     */\n    stylus(src, output, pluginOptions = {}) {\n        Verify.dependency(\n            'stylus-loader',\n            'npm install stylus-loader stylus --save-dev'\n        );\n\n        return this.preprocess(\n            'Stylus', src, output, pluginOptions\n        );\n    };\n\n\n    /**\n     * Register a generic CSS preprocessor.\n     *\n     * @param {string} type\n     * @param {string} src\n     * @param {string} output\n     * @param {object} pluginOptions\n     */\n    preprocess(type, src, output, pluginOptions) {\n        Verify.preprocessor(type, src, output);\n\n        global.entry.addStylesheet(src, output);\n\n        let Preprocessor = require('./Preprocessors/' + type);\n\n        this.Mix.preprocessors = (this.Mix.preprocessors || []).concat(\n            new Preprocessor(src, output, pluginOptions)\n        );\n\n        return this;\n    };\n\n\n    /**\n     * Combine a collection of files.\n     *\n     * @param {string|Array} src\n     * @param {string}       output\n     */\n    combine(src, output) {\n        this.Mix.concat.add({ src, output });\n\n        return this;\n    };\n\n\n    /**\n     * Alias for this.Mix.combine().\n     *\n     * @param {string|Array} src\n     * @param {string}       output\n     */\n    scripts(src, output) {\n        return this.combine(src, output);\n    };\n\n\n    /**\n     * Alias for this.Mix.combine().\n     *\n     * @param {string|Array} src\n     * @param {string}       output\n     */\n    styles(src, output) {\n        return this.combine(src, output);\n    };\n\n\n    /**\n     * Identical to this.Mix.combine(), but includes Babel compilation.\n     *\n     * @param {string|Array} src\n     * @param {string}       output\n     */\n    babel(src, output) {\n        this.Mix.concat.add({ src, output, babel: true });\n\n        return this;\n    };\n\n\n    /**\n     * Copy one or more files to a new location.\n     *\n     * @param {string} from\n     * @param {string} to\n     */\n    copy(from, to) {\n        this.Mix.copy.push({ from, to: global.Paths.root(to) });\n\n        return this;\n    };\n\n\n    /**\n     * Copy a directory to a new location. This is identical\n     * to mix.copy().\n     *\n     * @param {string} from\n     * @param {string} to\n     */\n    copyDirectory(from, to) {\n        return this.copy(from, to);\n    };\n\n\n    /**\n     * Minify the provided file.\n     *\n     * @param {string|Array} src\n     */\n    minify(src) {\n        let output = src.replace(/\\.([a-z]{2,})$/i, '.min.$1');\n\n        this.Mix.concat.add({ src, output });\n\n        return this;\n    };\n\n\n    /**\n     * Enable sourcemap support.\n     */\n    sourceMaps() {\n        global.options.sourcemaps = (this.Mix.inProduction ? false : '#inline-source-map');\n\n        return this;\n    };\n\n\n    /**\n     * Enable compiled file versioning.\n     *\n     * @param {string|Array} files\n     */\n    version(files = []) {\n        global.options.versioning = true;\n        this.Mix.version = [].concat(files);\n\n        return this;\n    };\n\n\n    /**\n     * Disable all OS notifications.\n     */\n    disableNotifications() {\n        global.options.notifications = false;\n\n        return this;\n    };\n\n\n    /**\n     * Set the path to your public folder.\n     *\n     * @param {string} path\n     */\n    setPublicPath(path) {\n        global.options.publicPath = this.Mix.publicPath = new File(path)\n            .parsePath()\n            .pathWithoutExt;\n\n        return this;\n    };\n\n\n    /**\n     * Set prefix for generated asset paths\n     *\n     * @param {string} path\n     */\n    setResourceRoot(path) {\n        global.options.resourceRoot = path;\n\n        return this;\n    };\n\n\n    /**\n     * Merge custom config with the provided webpack.config file.\n     *\n     * @param {object} config\n     */\n    webpackConfig(config) {\n        this.Mix.webpackConfig = config;\n\n        return this;\n    }\n\n\n    /**\n     * Set Mix-specific options.\n     *\n     * @param {object} options\n     */\n    options(options) {\n        if (options.purifyCss) {\n            options.purifyCss = require('./PurifyPaths').build(options.purifyCss);\n\n            Verify.dependency(\n                'purifycss-webpack',\n                'npm install purifycss-webpack --save-dev',\n                true // abortOnComplete\n            );\n        }\n\n        global.options.merge(options);\n\n        return this;\n    };\n\n\n    /**\n     * Register a Webpack build event handler.\n     *\n     * @param {Function} callback\n     */\n    then(callback) {\n        global.events.listen('build', callback);\n\n        return this;\n    }\n}\n\nmodule.exports = Api;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/WebpackPlugins/CopyWebpackPlugin.js":"let FileCollection = require('../FileCollection');\n\n/**\n * Create a new CopyWebpackPlugin instance.\n *\n * @param {array} copy\n */\nmodule.exports = function CopyWebpackPlugin(copy) {\n    copy.forEach(copy => {\n        let filesToCopy = new FileCollection(copy.from).copyTo(copy.to);\n\n        if (process.argv.includes('--watch') || process.argv.includes('--hot')) {\n            filesToCopy.watch();\n        }\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/FileCollection.js":"let fs = require('fs-extra');\nlet chokidar = require('chokidar');\nlet glob = require('glob');\n\nclass FileCollection {\n    /**\n     * Create a new FileCollection instance.\n     *\n     * @param {string|array} files\n     */\n    constructor(files) {\n        this.files = files;\n    }\n\n\n    /**\n     * Copy the src files to the given destination.\n     *\n     * @param  {string} destination\n     * @param  {string|array|null} src\n     * @return {this}\n     */\n    copyTo(destination, src) {\n        src = src || this.files;\n        this.destination = destination;\n\n        if (Array.isArray(src)) {\n            src.forEach(file => this.copyTo(this.destination, file));\n\n            return this;\n        }\n\n        if (src.includes('*')) {\n            return this.copyTo(this.destination, glob.sync(src));\n        }\n\n        src = new File(src).parsePath();\n        let output = this.outputPath(src);\n\n        console.log('Copying ' + src.path + ' to ' + output);\n        fs.copySync(src.path, output);\n\n        return this;\n    }\n\n\n    /**\n     * Construct the appropriate output path for the copy.\n     *\n     * @param  {Object} src\n     * @return {string}\n     */\n    outputPath(src) {\n        let output = new File(this.destination).parsePath();\n\n        // If the src path is a file, but the output is a directory,\n        // we have to append the src filename to the output path.\n        if (src.isFile && output.isDir) {\n            output = path.join(output.path, src.path.replace(this.files, ''));\n\n            if (new File(output).parsePath().isDir) {\n                output = path.join(output, src.file);\n            }\n        } else {\n            output = output.path;\n        }\n\n        return output;\n    }\n\n\n    /**\n     * Watch all files in the collection for changes.\n     */\n    watch() {\n        chokidar.watch(this.files, { persistent: true })\n            .on('change', updatedFile => this.copyTo(this.destination, updatedFile));\n    }\n}\n\nmodule.exports = FileCollection;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/WebpackPlugins/MockEntryPlugin.js":"function MockEntryPlugin(outputPath) {\n    this.outputPath = outputPath;\n}\n\nMockEntryPlugin.prototype.apply = function (compiler) {\n    compiler.plugin('done', stats => {\n        // If no mix.js() call was requested, we'll also need\n        // to delete the output script for the user. Since we\n        // won't know the exact name, we'll hunt it down.\n        let temporaryOutputFile = stats.toJson()\n            .assets\n            .find(asset => asset.chunkNames.includes('mix'));\n\n        if (temporaryOutputFile) {\n            File.find(\n                path.resolve(this.outputPath, temporaryOutputFile.name)\n            ).delete();\n        }\n\n        delete stats.compilation.assets['mix.js'];\n    });\n};\n\nmodule.exports = MockEntryPlugin;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/setup/webpack.config.js":"let path = require('path');\nlet glob = require('glob');\nlet webpack = require('webpack');\nlet Mix = require('laravel-mix').config;\nlet webpackPlugins = require('laravel-mix').plugins;\nlet dotenv = require('dotenv')\n\n/*\n |--------------------------------------------------------------------------\n | Load Environment Variables\n |--------------------------------------------------------------------------\n |\n | Load environment variables from .env file. dotenv will never modify\n | any environment variables that have already been set.\n |\n */\n\ndotenv.config({\n    path: Mix.Paths.root('.env')\n});\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Mix Initialization\n |--------------------------------------------------------------------------\n |\n | As our first step, we'll require the project's Laravel Mix file\n | and record the user's requested compilation and build steps.\n | Once those steps have been recorded, we may get to work.\n |\n */\n\nMix.initialize();\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Webpack Context\n |--------------------------------------------------------------------------\n |\n | This prop will determine the appropriate context, when running Webpack.\n | Since you have the option of publishing this webpack.config.js file\n | to your project root, we will dynamically set the path for you.\n |\n */\n\nmodule.exports.context = Mix.Paths.root();\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Webpack Entry\n |--------------------------------------------------------------------------\n |\n | We'll first specify the entry point for Webpack. By default, we'll\n | assume a single bundled file, but you may call Mix.extract()\n | to make a separate bundle specifically for vendor libraries.\n |\n */\n\nmodule.exports.entry = Mix.entry().get();\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Webpack Output\n |--------------------------------------------------------------------------\n |\n | Webpack naturally requires us to specify our desired output path and\n | file name. We'll simply echo what you passed to with Mix.js().\n | Note that, for Mix.version(), we'll properly hash the file.\n |\n */\n\nmodule.exports.output = Mix.output();\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Rules\n |--------------------------------------------------------------------------\n |\n | Webpack rules allow us to register any number of loaders and options.\n | Out of the box, we'll provide a handful to get you up and running\n | as quickly as possible, though feel free to add to this list.\n |\n */\n\nlet plugins = [];\n\nif (Mix.options.extractVueStyles) {\n    var vueExtractTextPlugin = Mix.vueExtractTextPlugin();\n\n    plugins.push(vueExtractTextPlugin);\n}\n\nlet rules = [\n    {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n            loaders: Mix.options.extractVueStyles ? {\n                js: 'babel-loader' + Mix.babelConfig(),\n                scss: vueExtractTextPlugin.extract({\n                    use: 'css-loader!sass-loader',\n                    fallback: 'vue-style-loader'\n                }),\n                sass: vueExtractTextPlugin.extract({\n                    use: 'css-loader!sass-loader?indentedSyntax',\n                    fallback: 'vue-style-loader'\n                }),\n                less: vueExtractTextPlugin.extract({\n                    use: 'css-loader!less-loader',\n                    fallback: 'vue-style-loader'\n                }),\n                stylus: vueExtractTextPlugin.extract({\n                    use: 'css-loader!stylus-loader?paths[]=node_modules',\n                    fallback: 'vue-style-loader'\n                }),\n                css: vueExtractTextPlugin.extract({\n                    use: 'css-loader',\n                    fallback: 'vue-style-loader'\n                })\n            }: {\n                js: 'babel-loader' + Mix.babelConfig(),\n                scss: 'vue-style-loader!css-loader!sass-loader',\n                sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax',\n                less: 'vue-style-loader!css-loader!less-loader',\n                stylus: 'vue-style-loader!css-loader!stylus-loader?paths[]=node_modules'\n            },\n\n            postcss: Mix.options.postCss,\n\n            preLoaders: Mix.options.vue.preLoaders,\n\n            postLoaders: Mix.options.vue.postLoaders\n        }\n    },\n\n    {\n        test: /\\.jsx?$/,\n        exclude: /(node_modules|bower_components)/,\n        loader: 'babel-loader' + Mix.babelConfig()\n    },\n\n    {\n        test: /\\.css$/,\n        loaders: ['style-loader', 'css-loader']\n    },\n\n    {\n        test: /\\.html$/,\n        loaders: ['html-loader']\n    },\n\n    {\n        test: /\\.(png|jpe?g|gif)$/,\n        loaders: [\n            {\n                loader: 'file-loader',\n                options: {\n                    name: path => {\n                        if (! /node_modules|bower_components/.test(path)) {\n                            return 'images/[name].[ext]?[hash]';\n                        }\n\n                        return 'images/vendor/' + path\n                            .replace(/\\\\/g, '/')\n                            .replace(\n                                /((.*(node_modules|bower_components))|images|image|img|assets)\\//g, ''\n                            ) + '?[hash]';\n                    },\n                    publicPath: Mix.options.resourceRoot\n                }\n            },\n            'img-loader'\n        ]\n    },\n\n    {\n        test: /\\.(woff2?|ttf|eot|svg|otf)$/,\n        loader: 'file-loader',\n        options: {\n            name: path => {\n                if (! /node_modules|bower_components/.test(path)) {\n                    return 'fonts/[name].[ext]?[hash]';\n                }\n\n                return 'fonts/vendor/' + path\n                    .replace(/\\\\/g, '/')\n                    .replace(\n                        /((.*(node_modules|bower_components))|fonts|font|assets)\\//g, ''\n                    ) + '?[hash]';\n            },\n            publicPath: Mix.options.resourceRoot\n        }\n    },\n\n    {\n        test: /\\.(cur|ani)$/,\n        loader: 'file-loader',\n        options: {\n            name: '[name].[ext]?[hash]',\n            publicPath: Mix.options.resourceRoot\n        }\n    }\n];\n\nlet sassRule = {\n    test: /\\.s[ac]ss$/,\n    loaders: ['style-loader', 'css-loader', 'sass-loader']\n};\n\nif (Mix.preprocessors) {\n    sassRule.exclude = Mix.preprocessors.map(preprocessor => preprocessor.test());\n}\n\nrules.push(sassRule);\n\nif (Mix.preprocessors) {\n    Mix.preprocessors.forEach(preprocessor => {\n        rules.push(preprocessor.rules());\n\n        plugins.push(preprocessor.extractPlugin);\n    });\n}\n\nmodule.exports.module = { rules };\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Resolve\n |--------------------------------------------------------------------------\n |\n | Here, we may set any options/aliases that affect Webpack's resolving\n | of modules. To begin, we will provide the necessary Vue alias to\n | load the Vue common library. You may delete this, if needed.\n |\n */\n\nmodule.exports.resolve = {\n    extensions: ['*', '.js', '.jsx', '.vue'],\n\n    alias: {\n        'vue$': 'vue/dist/vue.common.js'\n    }\n};\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Stats\n |--------------------------------------------------------------------------\n |\n | By default, Webpack spits a lot of information out to the terminal,\n | each you time you compile. Let's keep things a bit more minimal\n | and hide a few of those bits and pieces. Adjust as you wish.\n |\n */\n\nmodule.exports.stats = {\n    hash: false,\n    version: false,\n    timings: false,\n    children: false,\n    errors: false\n};\n\nprocess.noDeprecation = true;\n\nmodule.exports.performance = { hints: false };\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Devtool\n |--------------------------------------------------------------------------\n |\n | Sourcemaps allow us to access our original source code within the\n | browser, even if we're serving a bundled script or stylesheet.\n | You may activate sourcemaps, by adding Mix.sourceMaps().\n |\n */\n\nmodule.exports.devtool = Mix.options.sourcemaps;\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Webpack Dev Server Configuration\n |--------------------------------------------------------------------------\n |\n | If you want to use that flashy hot module replacement feature, then\n | we've got you covered. Here, we'll set some basic initial config\n | for the Node server. You very likely won't want to edit this.\n |\n */\nmodule.exports.devServer = {\n    historyApiFallback: true,\n    noInfo: true,\n    compress: true,\n    quiet: true\n};\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Plugins\n |--------------------------------------------------------------------------\n |\n | Lastly, we'll register a number of plugins to extend and configure\n | Webpack. To get you started, we've included a handful of useful\n | extensions, for versioning, OS notifications, and much more.\n |\n */\n\nplugins.push(\n    new webpack.ProvidePlugin(Mix.autoload || {}),\n\n    new webpackPlugins.FriendlyErrorsWebpackPlugin({ clearConsole: Mix.options.clearConsole }),\n\n    new webpackPlugins.StatsWriterPlugin({\n        filename: 'mix-manifest.json',\n        transform: Mix.manifest.transform.bind(Mix.manifest),\n    }),\n\n    new webpack.LoaderOptionsPlugin({\n        minimize: Mix.inProduction,\n        options: {\n            postcss: Mix.options.postCss,\n            context: __dirname,\n            output: { path: './' }\n        }\n    })\n);\n\nif (Mix.browserSync) {\n    plugins.push(\n        new webpackPlugins.BrowserSyncPlugin(\n            Object.assign({\n                host: 'localhost',\n                port: 3000,\n                proxy: 'app.dev',\n                files: [\n                    'app/**/*.php',\n                    'resources/views/**/*.php',\n                    'public/js/**/*.js',\n                    'public/css/**/*.css'\n                ]\n            }, Mix.browserSync),\n            {\n                reload: false\n            }\n        )\n    );\n}\n\nif (Mix.options.notifications) {\n    plugins.push(\n        new webpackPlugins.WebpackNotifierPlugin({\n            title: 'Laravel Mix',\n            alwaysNotify: true,\n            contentImage: Mix.Paths.root('node_modules/laravel-mix/icons/laravel.png')\n        })\n    );\n}\n\nif (Mix.copy.length) {\n    new webpackPlugins.CopyWebpackPlugin(Mix.copy);\n}\n\nif (Mix.entry().hasExtractions()) {\n    plugins.push(\n        new webpack.optimize.CommonsChunkPlugin({\n            names: Mix.entry().getExtractions(),\n            minChunks: Infinity\n        })\n    );\n}\n\nif (Mix.options.versioning) {\n    plugins.push(\n        new webpack[Mix.inProduction ? 'HashedModuleIdsPlugin': 'NamedModulesPlugin'](),\n        new webpackPlugins.WebpackChunkHashPlugin()\n    );\n}\n\nif (Mix.options.purifyCss) {\n    let PurifyCSSPlugin = require('purifycss-webpack');\n\n    // By default, we'll scan all Blade and Vue files in our project.\n    let paths = glob.sync(Mix.Paths.root('resources/views/**/*.blade.php')).concat(\n        Mix.entry().scripts.reduce((carry, js) => {\n            return carry.concat(glob.sync(js.base + '/**/*.vue'));\n        }, [])\n    );\n\n    plugins.push(new PurifyCSSPlugin(\n        Object.assign({ paths }, Mix.options.purifyCss, { minimize: Mix.inProduction })\n    ));\n}\n\nif (Mix.inProduction && Mix.options.uglify) {\n    plugins.push(\n        new webpack.optimize.UglifyJsPlugin(Mix.options.uglify)\n    );\n}\n\nplugins.push(\n    new webpack.DefinePlugin(\n        Mix.definitions({\n            NODE_ENV: Mix.inProduction\n                ? 'production'\n                : ( process.env.NODE_ENV || 'development' )\n        })\n    ),\n\n    new webpackPlugins.WebpackOnBuildPlugin(\n        stats => global.events.fire('build', stats)\n    )\n);\n\nif (! Mix.entry().hasScripts()) {\n    plugins.push(new webpackPlugins.MockEntryPlugin(Mix.output().path));\n}\n\nmodule.exports.plugins = plugins;\n\n\n\n/*\n |--------------------------------------------------------------------------\n | Mix Finalizing\n |--------------------------------------------------------------------------\n |\n | Now that we've declared the entirety of our Webpack configuration, the\n | final step is to scan for any custom configuration in the Mix file.\n | If mix.webpackConfig() is called, we'll merge it in, and build!\n |\n */\n\nif (Mix.webpackConfig) {\n    module.exports = require('webpack-merge').smart(\n        module.exports, Mix.webpackConfig\n    );\n}\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/setup/webpack.mix.js":"let mix = require('laravel-mix');\n\n/*\n |--------------------------------------------------------------------------\n | Mix Asset Management\n |--------------------------------------------------------------------------\n |\n | Mix provides a clean, fluent API for defining some Webpack build steps\n | for your Laravel application. By default, we are compiling the Sass\n | file for your application, as well as bundling up your JS files.\n |\n */\n\nmix.js('src/app.js', 'dist/')\n   .sass('src/app.scss', 'dist/');\n\n// Full API\n// mix.js(src, output);\n// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.\n// mix.extract(vendorLibs);\n// mix.sass(src, output);\n// mix.standaloneSass('src', output); <-- Faster, but isolated from Webpack.\n// mix.less(src, output);\n// mix.stylus(src, output);\n// mix.browserSync('my-site.dev');\n// mix.combine(files, destination);\n// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.\n// mix.copy(from, to);\n// mix.copyDirectory(fromDir, toDir);\n// mix.minify(file);\n// mix.sourceMaps(); // Enable sourcemaps\n// mix.version(); // Enable versioning.\n// mix.disableNotifications();\n// mix.setPublicPath('path/to/public');\n// mix.setResourceRoot('prefix/for/resource/locators');\n// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.\n// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.\n// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.\n// mix.options({\n//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.\n//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.\n//   purifyCss: false, // Remove unused CSS selectors.\n//   uglify: {}, // Uglify-specific options. https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\n//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md\n// });\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Preprocessors/Sass.js":"let Preprocessor = require('./Preprocessor');\n\nclass Sass extends Preprocessor {\n    /**\n     * Fetch the Webpack loaders for Sass.\n     */\n    loaders(sourceMaps) {\n        let loaders = [\n            { loader: 'sass-loader', options: this.sassPluginOptions() }\n        ];\n\n        if (global.options.processCssUrls) {\n            loaders.unshift(\n                { loader: 'resolve-url-loader' + (sourceMaps ? '?sourceMap' : '') }\n            );\n        }\n\n        return loaders;\n    }\n\n\n    /**\n     * Fetch the Node-Sass-specififc plugin options.\n     */\n    sassPluginOptions() {\n        return Object.assign({\n            precision: 8,\n            outputStyle: 'expanded'\n        }, this.pluginOptions, { sourceMap: true })\n    }\n}\n\nmodule.exports = Sass;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Preprocessors/Preprocessor.js":"let ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nclass Preprocessor {\n    /**\n     * Create a new Preprocessor instance.\n     *\n     * @param {string} src\n     * @param {string} output\n     * @param {object} pluginOptions\n     * @param {object} mixOptions\n     */\n    constructor(src, output, pluginOptions) {\n        src = new File(path.resolve(src)).parsePath();\n        output = new File(output).parsePath();\n\n        if (output.isDir) {\n            output = new File(\n                path.join(output.path, src.name + '.css')\n            ).parsePath();\n        }\n\n        this.src = src;\n        this.output = output;\n        this.pluginOptions = pluginOptions;\n    }\n\n\n    /**\n     * Get the Webpack extract text plugin instance.\n     */\n    getExtractPlugin() {\n        if (! this.extractPlugin) {\n            this.extractPlugin = new ExtractTextPlugin(this.outputPath());\n        }\n\n        return this.extractPlugin;\n    }\n\n\n    /**\n     * Prepare the Webpack rules for the preprocessor.\n     */\n    rules() {\n        return {\n            test: this.test(),\n            use: this.getExtractPlugin().extract({\n                fallback: 'style-loader',\n                use: this.defaultLoaders().concat(this.loaders(global.options.sourcemaps))\n            })\n        };\n    }\n\n\n    /**\n     * Get the regular expression test for the Extract plugin.\n     */\n    test() {\n        return new RegExp(this.src.path.replace(/\\\\/g, '\\\\\\\\') + '$');\n    }\n\n\n    /**\n     * Fetch the default Webpack loaders.\n     */\n    defaultLoaders() {\n        let sourceMap = !!global.options.sourcemaps;\n\n        return [\n            {\n                loader: 'css-loader',\n                options: {\n                    url: global.options.processCssUrls,\n                    sourceMap: sourceMap\n                }\n            },\n            {\n                loader: 'postcss-loader',\n                options: {\n                    sourceMap: sourceMap\n                }\n            }\n        ];\n    }\n\n\n    /**\n     * Determine the appropriate CSS output path.\n     *\n     * @param {object} output\n     */\n    outputPath() {\n        let regex = new RegExp('^(\\.\\/)?' + global.options.publicPath);\n        let pathVariant = global.options.versioning ? 'hashedPath' : 'path';\n\n        return this.output[pathVariant].replace(regex, '').replace(/\\\\/g, '/').replace('[hash]','[contenthash]');\n    }\n}\n\nmodule.exports = Preprocessor;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/PurifyPaths.js":"let glob = require('glob');\n\nclass Purify {\n    /**\n     * Build up the proper Purify file paths.\n     *\n     * @param {Boolean|object} options\n     */\n    static build(options) {\n        if (typeof options === 'object' && options.paths) {\n            let paths = options.paths;\n\n            paths.forEach(path => {\n                if (! path.includes('*')) return;\n\n                options.paths.splice(paths.indexOf(path), 1);\n\n                options.paths = paths.concat(glob.sync(path));\n            });\n        }\n\n        return options;\n    }\n}\n\nmodule.exports = Purify;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Preprocessors/Less.js":"let Preprocessor = require('./Preprocessor');\n\nclass Less extends Preprocessor {\n    /**\n     * Fetch the Webpack loaders for Less.\n     */\n    loaders(sourceMaps) {\n        return [{\n            loader: 'less-loader' + (sourceMaps ? '?sourceMap' : ''),\n            options: this.pluginOptions\n        }];\n    }\n}\n\nmodule.exports = Less;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Preprocessors/StandaloneSass.js":"let File = require('../File');\nlet path = require('path');\nlet spawn = require('child_process').spawn;\nlet notifier = require('node-notifier');\n\nclass StandaloneSass {\n    /**\n     * Create a new StandaloneSass instance.\n     *\n     * @param {string} src\n     * @param {string} output\n     * @param {object} pluginOptions\n     */\n    constructor(src, output, pluginOptions) {\n        src = new File(path.resolve(src)).parsePath();\n        output = new File(output).parsePath();\n\n        if (output.isDir) {\n            output = new File(\n                path.join(output.path, src.name + '.css')\n            ).parsePath();\n        }\n\n        this.src = src;\n        this.output = output;\n        this.pluginOptions = pluginOptions;\n        this.shouldWatch = process.argv.includes('--watch');\n    }\n\n\n    /**\n     * Run the node-sass compiler.\n     */\n    run() {\n        this.compile();\n\n        if (this.shouldWatch) this.watch();\n    }\n\n\n    /**\n     * Compile Sass.\n     *\n     * @param {Boolean} watch\n     */\n    compile(watch = false) {\n        let output = this.output.path;\n\n        if (! output.startsWith(options.publicPath)) {\n            output = path.join(options.publicPath, output);\n        }\n\n        this.command = spawn(\n            'node-sass', [this.src.path, output].concat(this.options(watch)), { shell: true }\n        );\n\n        this.whenOutputIsAvailable((output, event) => {\n            if (event === 'error') this.onFail(output);\n            if (event === 'success') this.onSuccess(output);\n        });\n\n        return this;\n    }\n\n    /**\n     * Fetch the node-sass options.\n     *\n     * @param {Boolean} watch\n     */\n    options(watch) {\n        let sassOptions = [\n            '--precision=8',\n            '--output-style=' + (global.options.production ? 'compressed' : 'expanded'),\n        ];\n\n        if (watch) sassOptions.push('--watch');\n\n        if (this.pluginOptions.includePaths) {\n            this.pluginOptions.includePaths.forEach(\n                path => sassOptions.push('--include-path=' + path)\n            );\n        }\n\n        if (global.options.sourcemaps && ! global.options.production) {\n            sassOptions.push('--source-map-embed');\n        }\n\n        return sassOptions;\n    }\n\n\n    /**\n     * Compile Sass, while registering a watcher.\n     */\n    watch() {\n        return this.compile(true);\n    }\n\n\n    /**\n     * Register a callback for when output is available.\n     *\n     * @param {Function} callback\n     */\n    whenOutputIsAvailable(callback) {\n        this.command.stderr.on('data', output => {\n            output = output.toString();\n\n            let event = 'change';\n            if (/Error/.test(output)) event = 'error';\n            if (/Wrote CSS/.test(output)) event = 'success';\n\n            callback(output, event);\n        });\n    }\n\n\n    /**\n     * Handle successful compilation.\n     *\n     * @param {string} output\n     */\n    onSuccess(output) {\n        console.log(\"\\n\");\n        console.log(output);\n\n        if (global.options.notifications) {\n            notifier.notify({\n                title: 'Laravel Mix',\n                message: 'Sass Compilation Successful',\n                contentImage: 'node_modules/laravel-mix/icons/laravel.png'\n            });\n        }\n\n        global.events.fire(\n            'standalone-sass-compiled', File.find(this.output.path)\n        );\n    }\n\n\n    /**\n     * Handle failed compilation.\n     *\n     * @param {string} output\n     */\n    onFail(output) {\n        console.log(\"\\n\");\n        console.log('Sass Compilation Failed!');\n        console.log();\n        console.log(output);\n\n        if (global.options.notifications) {\n            notifier.notify({\n                title: 'Laravel Mix',\n                subtitle: 'Sass Compilation Failed',\n                message: JSON.parse(output).message,\n                contentImage: 'node_modules/laravel-mix/icons/laravel.png'\n            });\n        }\n\n        if (! this.shouldWatch) process.exit();\n    }\n}\n\nmodule.exports = StandaloneSass;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Preprocessors/Stylus.js":"let Preprocessor = require('./Preprocessor');\n\nclass Stylus extends Preprocessor {\n    /**\n     * Fetch the Webpack loaders for Stylus.\n     */\n    loaders(sourceMaps) {\n        return [{\n            loader: 'stylus-loader' + (sourceMaps ? '?sourceMap' : ''),\n            options: this.pluginOptions\n        }];\n    }\n}\n\nmodule.exports = Stylus;\n","/home/travis/build/npmtest/node-npmtest-laravel-mix/node_modules/laravel-mix/src/Vue/ExtractTextPluginFactory.js":"let WebpackExtractPlugin = require('extract-text-webpack-plugin')\n\nclass ExtractTextPluginFactory {\n    /**\n     * Create a new class instance.\n     *\n     * @param {string|boolean} cssPath\n     */\n    constructor(mix, cssPath) {\n        if (typeof cssPath === 'boolean') {\n            cssPath = path.join(global.entry.base || '', 'vue-styles.css');\n\n            this.useDefault = true;\n        }\n\n        this.mix = mix;\n        this.path = cssPath;\n    }\n\n\n    /**\n     * Build up the necessary ExtractTextPlugin instance.\n     */\n    build() {\n        if (this.mix.preprocessors) {\n            // If no output path is provided, we can use the default plugin.\n            if (this.useDefault) return this.mix.preprocessors[0].getExtractPlugin();\n\n            // If what the user passed matches the output to mix.preprocessor(),\n            // then we can use that plugin instead and append to it.\n            if (this.pluginIsAlreadyBuilt()) return this.getPlugin();\n        }\n\n        // Otherwise, we'll setup a new plugin to toss the styles into it.\n        return new WebpackExtractPlugin(this.outputPath());\n    }\n\n\n    /**\n     * Check if the the provided path is already registered as an extract instance.\n     */\n    pluginIsAlreadyBuilt() {\n        return this.mix.preprocessors.find(\n            preprocessor => preprocessor.output.path === this.path\n        );\n    }\n\n\n    /**\n     * Fetch the Extract plugin instance that matches the current output path.\n     */\n    getPlugin() {\n        return this.mix.preprocessors.find(\n            preprocessor => preprocessor.getExtractPlugin().filename === this.outputPath()\n        ).getExtractPlugin();\n    }\n\n\n    /**\n     * Prepare the appropriate output path.\n     */\n    outputPath() {\n        let segments = new File(this.path).parsePath();\n\n        let regex = new RegExp('^(\\.\\/)?' + global.options.publicPath);\n        let pathVariant = global.options.versioning ? 'hashedPath' : 'path';\n\n        return segments[pathVariant].replace(regex, '').replace(/\\\\/g, '/');\n    }\n}\n\nmodule.exports = ExtractTextPluginFactory;\n"}